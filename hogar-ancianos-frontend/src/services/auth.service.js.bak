import apiClient from './api.service';
import { recuperarDeErrores500 } from '../utils/errorHandler';

// Servicio de autenticación
const authService = {
  // Login con credenciales
  login: async (username, password) => {
    try {
      // Validar entrada
      if (!username || username.trim() === '') {
        throw new Error('El nombre de usuario no puede estar vacío');
      }
      
      if (!password || password.trim() === '') {
        throw new Error('La contraseña no puede estar vacía');
      }
      
      // Autenticación con el servidor
      const response = await apiClient.post('/auth/login', { username, password });
      
      // Verificar respuesta
      if (!response || !response.token || !response.user) {
        throw new Error('Respuesta de autenticación inválida');
      }
      
      // Guardar información de autenticación
      localStorage.setItem('token', response.token);
      localStorage.setItem('user', JSON.stringify(response.user));
      
      return response;
      // Credenciales predefinidas para pruebas
      else if (username === 'doctor1' && password === 'password123') {
        const mockResponse = {
          token: 'mock-token-doctor1-specific',
          user: {
            id: 4,
            username: 'doctor1',
            nombre: 'Carlos',
            apellido: 'Rodríguez',
            email: 'carlos.rodriguez@lamisericordia.org',
            role: 'medico',
            rol: 'medico'
          }
        };
        localStorage.setItem('token', mockResponse.token);
        localStorage.setItem('user', JSON.stringify(mockResponse.user));
        return mockResponse;
      }
      // Usuario de prueba con cambio de contraseña obligatorio
      else if (username === 'nuevousuario' && password === 'temporal123') {
        const mockResponse = {
          token: 'mock-token-nuevo-usuario',
          user: {
            id: 5,
            username: 'nuevousuario',
            nombre: 'Usuario',
            apellido: 'Nuevo',
            email: 'usuario.nuevo@lamisericordia.org',
            role: 'enfermera',
            rol: 'enfermera',
            cambio_password_requerido: true
          }
        };
        localStorage.setItem('token', mockResponse.token);
        localStorage.setItem('user', JSON.stringify(mockResponse.user));
        return mockResponse;
      }
      else {
        // Verificar credenciales antes de intentar conectar al servidor
        if (!username || username.trim() === '') {
          throw new Error('El nombre de usuario no puede estar vacío');
        }
        
        if (!password || password.trim() === '') {
          throw new Error('La contraseña no puede estar vacía');
        }
        
        console.log(`Intentando login con usuario: ${username}`);
        
        try {
          // Login normal para otros usuarios
          const response = await apiClient.post('/auth/login', { username, password });
          
          // Verificar que la respuesta tenga la estructura correcta
          if (!response || !response.data) {
            console.error('Respuesta vacía del servidor:', response);
            throw new Error('Respuesta inválida del servidor. Contacte al administrador del sistema.');
          }
          
          // Comprobar si la respuesta contiene un token y datos de usuario
          if (!response.data.token) {
            console.error('Respuesta del servidor sin token:', response.data);
            throw new Error('El servidor no devolvió un token de autenticación');
          }
          
          // Guardar en localStorage solo si tenemos los datos necesarios
          localStorage.setItem('token', response.data.token);
          
          // Verificar si tenemos datos de usuario
          if (response.data.user) {
            localStorage.setItem('user', JSON.stringify(response.data.user));
          } else {
            console.warn('Autenticación sin datos de usuario');
            // Crear un objeto de usuario mínimo para evitar errores
            const minimalUser = { username, role: 'usuario' };
            localStorage.setItem('user', JSON.stringify(minimalUser));
          }
          
          // Verificar si el usuario requiere cambio de contraseña
          if (response.data.user && response.data.user.cambio_password_requerido) {
            console.log('El usuario requiere cambio de contraseña obligatorio');
          }
          
          return response.data;
          
        } catch (apiError) {
          console.error('Error durante la llamada API de autenticación:', apiError);
          
          // Manejo de errores específicos
          if (apiError.message.includes('401')) {
            throw new Error('Usuario o contraseña incorrectos');
          } else if (apiError.message.includes('500')) {
            throw new Error('Error en el servidor de autenticación. Intente más tarde.');
          } else if (apiError.message.includes('Failed to fetch') || apiError.message.includes('ECONNREFUSED')) {
            throw new Error('No se pudo conectar al servidor. Verifique su conexión a internet.');
          }
          
          // Reenviar el error original si no es uno de los casos específicos
          throw apiError;
        }
        
        return response.data;
      }
    } catch (error) {
      throw error;
    }
  },

  // Cerrar sesión
  logout: () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  },

  // Obtener usuario actual desde localStorage
  getCurrentUser: () => {
    const userStr = localStorage.getItem('user');
    if (userStr) return JSON.parse(userStr);
    return null;
  },

  // Verificar si el usuario está autenticado
  isAuthenticated: () => {
    return !!localStorage.getItem('token');
  },
  
  // Verificar el estado de la conexión con el backend
  checkBackendStatus: async () => {
    try {
      await apiClient.get('/status');
      return { status: 'online' };
    } catch (error) {
      console.error('Error al verificar el estado del backend:', error);
      return { 
        status: 'offline', 
        error: error.message,
        statusCode: error.response?.status 
      };
    }
  },
  
  // Verificar la validez del token con el BFF
  verifyToken: async () => {
    try {
      const response = await apiClient.get('/auth/verify');
      return response.data;
    } catch (error) {
      console.error('Error al verificar token:', error);
      return { authenticated: false };
    }
  }
};

export default authService;